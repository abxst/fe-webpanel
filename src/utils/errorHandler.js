/**
 * Error Handler Utility
 * H·ªá th·ªëng b·∫Øt l·ªói chi ti·∫øt cho to√†n b·ªô d·ª± √°n
 */

/**
 * Check if debug mode is enabled
 */
const isDebugEnabled = () => {
  const debugEnv = process.env.REACT_APP_IS_DEBUG;
  return debugEnv === 'true' || debugEnv === true;
};

/**
 * Log l·ªói chi ti·∫øt v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
 * @param {Error} error - ƒê·ªëi t∆∞·ª£ng l·ªói
 * @param {string} functionName - T√™n h√†m x·∫£y ra l·ªói
 * @param {string} fileName - T√™n file x·∫£y ra l·ªói
 * @param {object} additionalInfo - Th√¥ng tin b·ªï sung (params, context, etc.)
 */
export function logError(error, functionName, fileName, additionalInfo = {}) {
  const errorInfo = {
    timestamp: new Date().toISOString(),
    file: fileName,
    function: functionName,
    errorMessage: error.message || 'Unknown error',
    errorName: error.name || 'Error',
    errorStack: error.stack || 'No stack trace available',
    additionalInfo: additionalInfo,
  };

  // Ch·ªâ log n·∫øu debug mode ƒë∆∞·ª£c b·∫≠t
  if (isDebugEnabled()) {
    // Log chi ti·∫øt ra console v·ªõi format d·ªÖ ƒë·ªçc
    console.group(`üî¥ ERROR in ${fileName} > ${functionName}`);
    console.error('‚è∞ Timestamp:', errorInfo.timestamp);
    console.error('üìÑ File:', errorInfo.file);
    console.error('üîß Function:', errorInfo.function);
    console.error('‚ùå Error Name:', errorInfo.errorName);
    console.error('üí¨ Error Message:', errorInfo.errorMessage);
    console.error('üìä Stack Trace:', errorInfo.errorStack);
    if (Object.keys(additionalInfo).length > 0) {
      console.error('‚ÑπÔ∏è Additional Info:', errorInfo.additionalInfo);
    }
    console.groupEnd();
  }

  // C√≥ th·ªÉ g·ª≠i l·ªói l√™n server logging service
  // sendErrorToServer(errorInfo);

  return errorInfo;
}

/**
 * Wrapper cho async function v·ªõi error handling t·ª± ƒë·ªông
 * @param {Function} fn - Async function c·∫ßn wrap
 * @param {string} functionName - T√™n h√†m
 * @param {string} fileName - T√™n file
 */
export function withErrorHandler(fn, functionName, fileName) {
  return async (...args) => {
    try {
      return await fn(...args);
    } catch (error) {
      logError(error, functionName, fileName, {
        arguments: args,
      });
      throw error; // Re-throw ƒë·ªÉ caller c√≥ th·ªÉ handle ti·∫øp
    }
  };
}

/**
 * Try-catch helper v·ªõi error logging
 * @param {Function} fn - Function c·∫ßn th·ª±c thi
 * @param {string} functionName - T√™n h√†m
 * @param {string} fileName - T√™n file
 * @param {Function} fallback - Callback khi c√≥ l·ªói
 * @param {object} additionalInfo - Th√¥ng tin b·ªï sung
 */
export async function tryCatch(fn, functionName, fileName, fallback = null, additionalInfo = {}) {
  try {
    return await fn();
  } catch (error) {
    logError(error, functionName, fileName, additionalInfo);
    
    if (fallback) {
      return fallback(error);
    }
    
    throw error;
  }
}

/**
 * Error boundary helper cho React components
 */
export function getErrorMessage(error) {
  if (error.response?.data?.message) {
    return error.response.data.message;
  }
  if (error.message) {
    return error.message;
  }
  return 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh';
}

/**
 * Log warning (kh√¥ng ph·∫£i error nh∆∞ng c·∫ßn ch√∫ √Ω)
 */
export function logWarning(message, functionName, fileName, additionalInfo = {}) {
  if (!isDebugEnabled()) return;

  console.group(`‚ö†Ô∏è WARNING in ${fileName} > ${functionName}`);
  console.warn('‚è∞ Timestamp:', new Date().toISOString());
  console.warn('üìÑ File:', fileName);
  console.warn('üîß Function:', functionName);
  console.warn('üí¨ Message:', message);
  if (Object.keys(additionalInfo).length > 0) {
    console.warn('‚ÑπÔ∏è Additional Info:', additionalInfo);
  }
  console.groupEnd();
}

/**
 * Log info (th√¥ng tin debug)
 */
export function logInfo(message, functionName, fileName, additionalInfo = {}) {
  if (!isDebugEnabled()) return;

  console.group(`‚ÑπÔ∏è INFO in ${fileName} > ${functionName}`);
  console.info('‚è∞ Timestamp:', new Date().toISOString());
  console.info('üìÑ File:', fileName);
  console.info('üîß Function:', functionName);
  console.info('üí¨ Message:', message);
  if (Object.keys(additionalInfo).length > 0) {
    console.info('‚ÑπÔ∏è Additional Info:', additionalInfo);
  }
  console.groupEnd();
}

